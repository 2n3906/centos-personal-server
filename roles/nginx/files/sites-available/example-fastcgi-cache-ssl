# Define path to cache and memory zone. The memory zone should be unique.
# keys_zone=SITE_NAME_HERE:100m creates the memory zone and sets the maximum size in MBs.
# inactive=60m will remove cached items that haven't been accessed for 60 minutes or more.
fastcgi_cache_path /sites/SITE_NAME_HERE/cache levels=1:2 keys_zone=SITE_NAME_HERE:100m inactive=60m;

server {
    # Ports to listen on, uncomment one.
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Server name to listen for
    server_name SITE_NAME_HERE;

    # Path to document root
    root /sites/SITE_NAME_HERE/public;

    # Paths to certificate files.
    ssl_certificate /etc/letsencrypt/live/SITE_NAME_HERE/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/SITE_NAME_HERE/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/SITE_NAME_HERE/chain.pem;

    # File to be used as index
    index index.php index.html;

    # Overrides logs defined in nginx.conf, allows per site logs.
    access_log /var/log/nginx/SITE_NAME_HERE.access.log;
    error_log /var/log/nginx/SITE_NAME_HERE.error.log;

    # Default server block rules
    include global/server/defaults.conf;

    # Fastcgi cache rules
    include global/server/fastcgi-cache.conf;

    # SSL rules
    include global/server/ssl.conf;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        include global/fastcgi-params.conf;

        fastcgi_pass unix:/var/run/php-fpm/php7.1-fpm.sock;

        # Skip cache based on rules in global/server/fastcgi-cache.conf.
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;

        # Define memory zone for caching. Should match key_zone in fastcgi_cache_path above.
        fastcgi_cache SITE_NAME_HERE;

        # Define caching time.
        fastcgi_cache_valid 60m;
    }
}

# Redirect http to https
server {
    listen 80;
    listen [::]:80;
    server_name SITE_NAME_HERE www.SITE_NAME_HERE;

    return 301 https://SITE_NAME_HERE$request_uri;
}

# Redirect www to non-www
server {
    listen 443;
    listen [::]:443;
    server_name www.SITE_NAME_HERE;

    return 301 https://SITE_NAME_HERE$request_uri;
}
