---
- name: Add official nginx Yum repo
  yum_repository:
    name: nginx
    description: nginx repo
    baseurl: http://nginx.org/packages/centos/$releasever/$basearch/
    gpgkey: http://nginx.org/keys/nginx_signing.key
    gpgcheck: yes

- name: Install latest nginx (from official nginx repos)
  yum: name=nginx enablerepo=nginx state=present

- name: Install certbot
  yum: name=certbot state=present

- name: Create nginx.conf based on template
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf setype=httpd_config_t seuser=system_u serole=object_r

- name: Copy global nginx config files
  copy: src={{ item }} dest=/etc/nginx setype=httpd_config_t seuser=system_u serole=object_r backup=yes
  with_items:
    - conf.d
    - default.d
    - fastcgi_params
    - global
    - mime.types
    - scgi_params
    - uwsgi_params

- name: Copy sites-available, sites-enabled nginx config files
  copy: src={{ item }} dest=/etc/nginx setype=httpd_config_t seuser=system_u serole=object_r force=no
  with_items:
    - sites-available
    - sites-enabled

- name: Configure logrotate script to make access logs world-readable
  replace:
    dest: /etc/logrotate.d/nginx
    regexp: '^[ \t]+create 640 nginx adm'
    replace: '        create 644 nginx www'
    backup: yes

- name: Create sites-enabled directory
  file: path=/etc/nginx/sites-enabled state=directory mode=0755 setype=httpd_config_t seuser=system_u serole=object_r

- name: Symlink default server
  file: src=../sites-available/default dest=/etc/nginx/sites-enabled/default state=link

- name: Configure default server
  template: src=first-server.j2 dest=/etc/nginx/sites-available/{{ ansible_nodename }} setype=httpd_config_t force=no seuser=system_u serole=object_r

# link first server to enabled
- name: link first server
  file: src=../sites-available/{{ ansible_nodename }} dest=/etc/nginx/sites-enabled/{{ ansible_nodename }} state=link
  notify: reload nginx

- name: set up directory structure for docroot
  file: path={{ item.name }} state=directory mode=0755 owner={{ nginx_user }} group={{ nginx_group }} setype={{ item.setype }}
  with_items:
    - { name: '/sites/{{ ansible_nodename }}/cache', setype: 'httpd_cache_t' }
    - { name: '/sites/{{ ansible_nodename }}/public', setype: 'httpd_sys_content_t' }

- name: Update firewall to allow inbound http/https
  firewalld: service={{ item }} permanent=true state=enabled immediate=yes
  with_items:
    - http
    - https

- name: Enable SELinux booleans to make nginx work
  seboolean: name=httpd_setrlimit state=yes persistent=yes
  with_items:
    - httpd_setrlimit            # necessary to set open files limit from conf
    - httpd_can_sendmail         # necessary for Wordpress
    - httpd_can_network_connect  # necessary to connect to Redis cache

# Note that for Grav CMS, the entire docroot should be httpd_sys_rw_content_t
- name: Configure SELinux permissions for our custom nginx directories
  sefcontext: target={{ item.target }} setype={{ item.setype }} state=present
  with_items:
    - { target: '/sites/([^/]*)?/public(/.*)?', setype: 'httpd_sys_content_t' }  # docroot
    - { target: '/sites/([^/]*)?/cache(/.*)?', setype: 'httpd_cache_t' } # cache
    - { target: '/sites/([^/]*)?/public(/.*)?/wp-content/uploads(/.*)?', setype: 'httpd_sys_rw_content_t' } # wordpress read/write
    - { target: '/sites/([^/]*)?/public(/.*)?/wp-content/backups(/.*)?', setype: 'httpd_sys_rw_content_t' } # wordpress updraft plus backups
    - { target: '/sites/([^/]*)?/public/tmp(/.*)?', setype: 'httpd_sys_rw_content_t' } # matomo
    - { target: '/etc/(letsencrypt|certbot)/(live|archive)(/.*)?', setype: 'cert_t' } # letsencrypt (not sure if needed)

- name: Enable nginx now and in the future
  service: name=nginx state=started enabled=yes

- name: Create dhparam file if one does not exist
  command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 creates=/etc/ssl/certs/dhparam.pem

- name: Check if we've generated a Let's Encrypt cert already
  stat: path=/etc/letsencrypt/live/{{ ansible_nodename }}/fullchain.pem
  register: cert_stats

# nginx must be running and correctly configured for this to succeed
- name: Generate Let's Encrypt certificate (if needed)
  become: yes
  shell: "certbot certonly --webroot -w /sites/{{ ansible_nodename }}/public -d {{ ansible_nodename }} --email {{ letsencrypt_email }} --non-interactive --agree-tos"
  when: cert_stats.stat.exists == False
  notify: reload nginx

- name: Configure certbot auto-update cron job (with hooks for nginx & postfix)
  cron:
    name: certbot
    minute: 22
    hour: '3,15'
    user: root
    job: 'certbot renew --quiet --post-hook "systemctl reload nginx" --post-hook "systemctl reload postfix"'
    cron_file: certbot
